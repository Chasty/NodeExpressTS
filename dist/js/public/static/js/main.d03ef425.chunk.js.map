{"version":3,"sources":["API.ts","components/AddTodo.tsx","components/TodoItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["baseUrl","getTodos","a","axios","get","todos","Error","addTodo","formData","todo","name","description","status","post","saveTodo","updateTodo","todoUpdate","put","_id","updatedTodo","deleteTodo","delete","deletedTodo","AddTodo","useState","setFormData","handleForm","e","currentTarget","id","value","className","onSubmit","htmlFor","onChange","type","disabled","undefined","Todo","checkTodo","style","textAlign","onClick","App","setTodos","useEffect","fetchTodos","then","data","catch","err","console","log","handleUpdateTodo","handleDeleteTodo","preventDefault","map","TodoItem","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d03ef425.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\"\r\n\r\n//const baseUrl: string = \"http://localhost:4300\"\r\nconst baseUrl: string = \"http://51.79.67.17:4300\"\r\nexport const getTodos = async (): Promise<AxiosResponse<ApiDataType>> => {\r\n  try {\r\n    const todos: AxiosResponse<ApiDataType> = await axios.get(\r\n      baseUrl + \"/todos\"\r\n    )\r\n    return todos\r\n  } catch (error) {\r\n    throw new Error(error)\r\n  }\r\n}\r\n\r\nexport const addTodo = async (\r\n    formData: ITodo\r\n  ): Promise<AxiosResponse<ApiDataType>> => {\r\n    try {\r\n      const todo: Omit<ITodo, \"_id\"> = {\r\n        name: formData.name,\r\n        description: formData.description,\r\n        status: false,\r\n      }\r\n      const saveTodo: AxiosResponse<ApiDataType> = await axios.post(\r\n        baseUrl + \"/add-todo\",\r\n        todo\r\n      )\r\n      return saveTodo\r\n    } catch (error) {\r\n      throw new Error(error)\r\n    }\r\n}\r\n\r\nexport const updateTodo = async (\r\n    todo: ITodo\r\n  ): Promise<AxiosResponse<ApiDataType>> => {\r\n    try {\r\n      const todoUpdate: Pick<ITodo, \"status\"> = {\r\n        status: true,\r\n      }\r\n      const updatedTodo: AxiosResponse<ApiDataType> = await axios.put(\r\n        `${baseUrl}/edit-todo/${todo._id}`,\r\n        todoUpdate\r\n      )\r\n      return updatedTodo\r\n    } catch (error) {\r\n      throw new Error(error)\r\n    }\r\n}\r\n\r\nexport const deleteTodo = async (\r\n    _id: string\r\n  ): Promise<AxiosResponse<ApiDataType>> => {\r\n    try {\r\n      const deletedTodo: AxiosResponse<ApiDataType> = await axios.delete(\r\n        `${baseUrl}/delete-todo/${_id}`\r\n      )\r\n      return deletedTodo\r\n    } catch (error) {\r\n      throw new Error(error)\r\n    }\r\n}","import React, { useState } from 'react'\n\ntype Props = { \n  saveTodo: (e: React.FormEvent, formData: ITodo | any) => void \n}\n\nconst AddTodo: React.FC<Props> = ({ saveTodo }) => {\n  const [formData, setFormData] = useState<ITodo | {}>()\n\n  const handleForm = (e: React.FormEvent<HTMLInputElement>): void => {\n    setFormData({\n      ...formData,\n      [e.currentTarget.id]: e.currentTarget.value,\n    })\n  }\n\n  return (\n    <form className='Form' onSubmit={(e) => saveTodo(e, formData)}>\n      <div>\n        <div>\n          <label htmlFor='name'>Name</label>\n          <input onChange={handleForm} type='text' id='name' />\n        </div>\n        <div>\n          <label htmlFor='description'>Description</label>\n          <input onChange={handleForm} type='text' id='description' />\n        </div>\n      </div>\n      <button disabled={formData === undefined ? true: false} >Add Todo</button>\n    </form>\n  )\n}\n\nexport default AddTodo","import React from \"react\"\r\n\r\ntype Props = TodoProps & {\r\n  updateTodo: (todo: ITodo) => void\r\n  deleteTodo: (_id: string) => void\r\n}\r\n\r\nconst Todo: React.FC<Props> = ({ todo, updateTodo, deleteTodo }) => {\r\n  const checkTodo: string = todo.status ? `line-through` : \"\"\r\n  return (\r\n    <div className=\"Card\">\r\n      <div className=\"Card--text\">\r\n        <h1 className={checkTodo}>{todo.name}</h1>\r\n        <span style={{ textAlign: 'left' }} className={checkTodo}>{todo.description}</span>\r\n      </div>\r\n      <div className=\"Card--button\">\r\n        <button\r\n          onClick={() => updateTodo(todo)}\r\n          className={todo.status ? `hide-button` : \"Card--button__done\"}\r\n        >\r\n          Complete\r\n        </button>\r\n        <button\r\n          onClick={() => deleteTodo(todo._id)}\r\n          className=\"Card--button__delete\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Todo","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { getTodos, addTodo, updateTodo, deleteTodo } from './API';\nimport AddTodo  from './components/AddTodo'\nimport TodoItem  from './components/TodoItem'\n\nfunction App() {\n  const [todos, setTodos] = useState<ITodo[]>([])\n\n  useEffect(() => {\n    fetchTodos()\n  }, [])\n\n  const fetchTodos = (): void => {\n    getTodos()\n    .then(({ data: { todos } }: ITodo[] | any) => setTodos(todos))\n    .catch((err: Error) => console.log(err))\n  }\n\n  const handleSaveTodo = (e: React.FormEvent, formData: ITodo): void => {\n    e.preventDefault()\n    addTodo(formData)\n      .then(({ status, data }) => {\n        if (status !== 201) {\n          throw new Error(\"Error! Todo not saved\")\n        }\n        setTodos(data.todos)\n      })\n      .catch(err => console.log(err))\n  }\n\n  const handleUpdateTodo = (todo: ITodo): void => {\n    updateTodo(todo)\n      .then(({ status, data }) => {\n        if (status !== 200) {\n          throw new Error(\"Error! Todo not updated\")\n        }\n        setTodos(data.todos)\n      })\n      .catch(err => console.log(err))\n  }\n  \n  const handleDeleteTodo = (_id: string): void => {\n    deleteTodo(_id)\n      .then(({ status, data }) => {\n        if (status !== 200) {\n          throw new Error(\"Error! Todo not deleted\")\n        }\n        setTodos(data.todos)\n      })\n      .catch(err => console.log(err))\n  }\n\n  return (\n    <main className='App'>\n      <h1>My Todos</h1>\n      <AddTodo saveTodo={handleSaveTodo} />\n      {todos.map((todo: ITodo) => (\n        <TodoItem\n          key={todo._id}\n          updateTodo={handleUpdateTodo}\n          deleteTodo={handleDeleteTodo}\n          todo={todo}\n        />\n      ))}\n    </main>\n  )\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}